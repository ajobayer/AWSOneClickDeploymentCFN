AWSTemplateFormatVersion: 2010-09-09
Description: Demo - WebSite with DB scaling with load
Parameters:
  VPCtoDeploy:
    Type: 'AWS::EC2::VPC::Id'
    Description: VPC into which to deploy demo..
  SubnetsToUse:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnets to deploy HA server into
  NumberOfInstances:
    Type: String
    Description: Desired Number of instances
    Default: '2'
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: SSH Key to use for autoscaling instances
  ENVIRONMENT:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - PROD
      - PRESALES
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-c481fad3" # AMALINUX SEP 2016
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-southeast-1:
      "AMALINUX" : "ami-7243e611" # AMALINUX SEP 2016
    ap-southeast-2:
      "AMALINUX" : "ami-55d4e436" # AMALINUX SEP 2016
    ap-northeast-2:
      "AMALINUX" : "ami-a04297ce" # AMALINUX SEP 2016
    ap-northeast-1:
      "AMALINUX" : "ami-1a15c77b" # AMALINUX SEP 2016
    ap-south-1:
      "AMALINUX" : "ami-cacbbea5" # AMALINUX SEP 2016
    sa-east-1:
      "AMALINUX" : "ami-b777e4db" # AMALINUX SEP 2016
  InstanceSize:
    DEV:
      "EC2InstanceA" : "t2.micro"
    TEST:
      "EC2InstanceA" : "t2.micro"
    PROD:
      "EC2InstanceA" : "t2.small"
    PRESALES:
      "EC2InstanceA" : "t2.micro"
Resources:
  elasticloadbalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: 'true'
      Subnets: !Ref SubnetsToUse
      Scheme: internet-facing
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/healthcheck.html'
        HealthyThreshold: '3'
        UnhealthyThreshold: '3'
        Interval: '5'
        Timeout: '2'
      SecurityGroups:
        - !ImportValue public-web-sg
  autoscalingroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref SubnetsToUse
      Cooldown: '30'
      DesiredCapacity: !Ref NumberOfInstances
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref launchconfiguration
      LoadBalancerNames:
        - !Ref elasticloadbalancer
      MaxSize: 5
      MinSize: 2
      Tags:
        - Key: Name
          Value: AutoScalingInstance
          PropagateAtLaunch: 'true'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '15'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - !Ref ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoscalingroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '3'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
        - !Ref ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoscalingroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoscalingroup
      Cooldown: '45'
      ScalingAdjustment: '2'
  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoscalingroup
      Cooldown: '15'
      ScalingAdjustment: '-2'
  launchconfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          Install:
            - Install
        Install:
          packages:
            yum:
              php55: []
          files:
            /var/www/html/aws.phar:
              source: >-
                https://github.com/aws/aws-sdk-php/releases/download/3.13.0/aws.phar
            /var/www/html/healthcheck.html:
              content: !Join
                - ''
                - - |
                    <html><head><title>ELB Health Check</title></head>
                  - |
                    <body><h1>HEALTHCHECK</h1></body></html>
              mode: '000600'
              owner: apache
              group: apache
            /var/www/html/index.php:
              content: !Join
                - ''
                - - |
                    <html>
                  - |
                      <head>
                  - |
                        <title>AWS CloudFormation PHP Sample</title>
                  - |
                      </head>
                  - |
                      <body>
                  - |
                       <?php echo '<p>Hello World - Working - Version 1</p>'; ?>
                  - |
                       <?php
                  - |
                       $txt2 = "Server IP Address";
                  - |
                       echo "<h2>" . $txt2 . "</h2>";
                  - |
                       $eip = file_get_contents('http://169.254.169.254/latest/meta-data/public-ipv4');
                  - |
                       echo $eip;
                  - |
                       ?>
                  - |
                      </body>
                  - |
                    </html>
              mode: '000600'
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets Install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AssociatePublicIpAddress: 'true'
      EbsOptimized: 'false'
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2InstanceA]
      InstanceMonitoring: 'true'
      KeyName: !Ref KeyName
      SecurityGroups:
        - !ImportValue public-web-sg
      UserData:
        "Fn::Base64":
            !Sub |
              #!/bin/bash
              yum update -y aws-cfn-bootstrap # good practice - always do this.
              # Install the files and packages from the metadata
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource launchconfiguration --configsets Install --region ${AWS::Region}
