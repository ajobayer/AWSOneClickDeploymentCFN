#Main App and Test App
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
        Label:
          default: "App Environment Configuration"
        Parameters:
          - ENVIRONMENT
          - APPVERSION
Parameters:
  APPVERSION:
    Type: String
    Description: Application Version to Deploy
  ENVIRONMENT:
    Type: String
    Description: Type of environment to provision
    Default: DEV
    AllowedValues:
      - DEV
      - TEST
      - PROD
      - PRESALES
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-c481fad3" # AMALINUX SEP 2016
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-southeast-1:
      "AMALINUX" : "ami-7243e611" # AMALINUX SEP 2016
    ap-southeast-2:
      "AMALINUX" : "ami-55d4e436" # AMALINUX SEP 2016
    ap-northeast-2:
      "AMALINUX" : "ami-a04297ce" # AMALINUX SEP 2016
    ap-northeast-1:
      "AMALINUX" : "ami-1a15c77b" # AMALINUX SEP 2016
    ap-south-1:
      "AMALINUX" : "ami-cacbbea5" # AMALINUX SEP 2016
    sa-east-1:
      "AMALINUX" : "ami-b777e4db" # AMALINUX SEP 2016
  InstanceSize:
    DEV:
      "EC2InstanceA" : "t2.micro"
      "EC2InstanceB" : "t2.micro"
    TEST:
      "EC2InstanceA" : "t2.micro"
    PROD:
      "EC2InstanceA" : "t2.small"
    PRESALES:
      "EC2InstanceA" : "t2.micro"
Resources:
  ELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      CrossZone: true
      Instances:
        - !Ref EC2InstanceA
        - !Ref EC2InstanceB
      Listeners:
        -
          InstancePort: "80"
          InstanceProtocol: HTTP
          LoadBalancerPort: "80"
          Protocol: HTTP
      Subnets:
        - !ImportValue shared-infrastructure-subnetpublicshared-a
        - !ImportValue shared-infrastructure-subnetpublicshared-b
      SecurityGroups:
        - !ImportValue public-web-sg
  EC2InstanceA: # for now this is EC2 instance in a public subnet
    Type: "AWS::EC2::Instance"
    DeletionPolicy: Delete
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2InstanceA]
      KeyName: AdvancedCFN
      SecurityGroupIds:
        - !ImportValue public-web-sg
      SubnetId: !ImportValue shared-infrastructure-subnetpublicshared-a
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2InstanceA --configsets www --region ${AWS::Region}
            yum -y update
            curl 127.0.0.1/app.php | grep -f /var/www/html/test.pattern
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceA --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_www"
            - "config_app"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2InstanceA.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2InstanceA --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_www:
          packages:
            yum:
              httpd: []
              php: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_app:
          sources:
            /var/www/html: !Join ["",[!ImportValue sharedinf-app-bucket-url, "/App", !Ref APPVERSION, ".zip"]]
          files:
            /var/www/html/test.pattern.zip:
              source: !Join ["",[!ImportValue sharedinf-app-bucket-url, "/Test", !Ref APPVERSION, ".zip"]]
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            unzippattern:
              cwd: "/var/www/html"
              command: "unzip -o test.pattern.zip"
  EC2InstanceB: # for now this is EC2 instance in a public subnet
    Type: "AWS::EC2::Instance"
    DeletionPolicy: Delete
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceSize, !Ref ENVIRONMENT, EC2InstanceB]
      KeyName: AdvancedCFN
      SecurityGroupIds:
        - !ImportValue public-web-sg
      SubnetId: !ImportValue shared-infrastructure-subnetpublicshared-b
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap # good practice - always do this.
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2InstanceB --configsets www --region ${AWS::Region}
            yum -y update
            curl 127.0.0.1/app.php | grep -f /var/www/html/test.pattern
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2InstanceB --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          www:
            - "configure_cfn"
            - "install_www"
            - "config_app"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2InstanceB.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2InstanceB --configsets www --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_www:
          packages:
            yum:
              httpd: []
              php: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_app:
          sources:
            /var/www/html: !Join ["",[!ImportValue sharedinf-app-bucket-url, "/App", !Ref APPVERSION, ".zip"]]
          files:
            /var/www/html/test.pattern.zip:
              source: !Join ["",[!ImportValue sharedinf-app-bucket-url, "/Test", !Ref APPVERSION, ".zip"]]
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            unzippattern:
              cwd: "/var/www/html"
              command: "unzip -o test.pattern.zip"
Outputs:
  Endpoint:
    Description: Application Address
    Value: !Join ["", ["http://", !GetAtt ELB.DNSName, "/app.php"]]
